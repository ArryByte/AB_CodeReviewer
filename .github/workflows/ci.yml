name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Lint with ruff
      run: |
        ruff check ab_reviewer/ tests/ --output-format=github
    
    - name: Format check with black
      run: |
        black --check --diff ab_reviewer/ tests/ *.py
    
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff ab_reviewer/ tests/ *.py
    
    - name: Type check with mypy
      run: |
        mypy ab_reviewer/ --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        bandit -r ab_reviewer/ -f json -o bandit-report.json || true
        bandit -r ab_reviewer/ -ll
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=ab_reviewer --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Audit dependencies
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Run integration tests
      run: |
        pytest tests/ -v -m integration
      env:
        GEMINI_INTEGRATION: 1
